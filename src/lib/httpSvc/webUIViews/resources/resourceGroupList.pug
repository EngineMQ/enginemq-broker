extends ../_base
block content
    if (authInfo.isAnonymousMode)
        center
            span.badge.badge-warning
                i.fa.fa-fw.fa-exclamation-triangle
                | No authorization resource is defined, so anyone can log in to webUI and send or receive messages on any topic!
        br
    else if (authInfo.isAnonymousWebUiMode)
        center
            span.badge.badge-warning
                i.fa.fa-fw.fa-exclamation-triangle
                | No authorization with webadmin resource is defined, so anyone can log in to webUI!
        br

    if (resourceOriginLastStatus)
        center 
            span.badge(class=resourceOriginLastStatus.isError ? 'badge-danger' : 'badge-success')
                = resourceOriginLastStatus.description
                br
                = resourceOriginLastStatus.status
                br
                = resourceOriginLastStatus.date

    .row
        .col-md-6
            .btn-group(role='group')
                .dropdown
                    a.btn.btn-info.dropdown-toggle#dropdownMenuNew(href='#' role='button' data-toggle='dropdown')
                        i.fa.fa-plus
                        | 
                        | New
                        | 
                    .dropdown-menu(aria-labelledby='dropdownMenuNew')
                        a.dropdown-item(href='/resources/routers/new')
                            i.fa.fa-fw.fa-route.mr-2
                            | 
                            | Router
                        a.dropdown-item(href='/resources/validators/new')
                            i.fa.fa-fw.fa-check-double.mr-2
                            | 
                            | Validator
                        a.dropdown-item(href='/resources/auths/new')
                            i.fa.fa-fw.fa-user-lock.mr-2
                            | 
                            | Auth
                a.btn.btn-default.fileup-btn(href='#')
                    i.fa.fa-upload
                    | 
                    | Import from yaml
                    input#upload-yaml(type='file')
        if (resources.routers.length || resources.validators.length || resources.auths.length)
            .col-md-6
                .float-right
                    .btn-group(role='group')
                        a.btn.btn-default(href='/resources/yaml')
                            i.fa.fa-download
                            | 
                            | Export all resources to yaml
                        button.btn.btn-danger(href='#' onclick='deleteAllResource()')
                            i.fa.fa-times
                            | 
                            | Delete all resources

    .row
        .col-md-11.offset-md-1
            include resourceGroupListRouter.pug
            include resourceGroupListValidator.pug
            include resourceGroupListAuth.pug
    br
    br

    script(type='text/javascript').
        function deleteAllResource()
        {
            Swal.fire({
                title: 'Delete all resources',
                text: `Do you want to delete all resources?`,
                confirmButtonText: 'Delete all',
                showCancelButton: true,
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post("/resources/delete/all")
                    .done(function() {
                        window.location.reload();
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        toastr.error(errorThrown, 'Error');
                    });        
                }
            })
        }

        $(function() {
            $.fileup({
                url: '/resources/upload/yaml',
                inputID: 'upload-yaml',
                queueID: 'notused',
                autostart: true,
                fieldName: 'resourceYaml',
                sizeLimit: 1 * 1000 * 1000,
                filesLimit: 1,
                onSuccess: function(response, file_number, file) {
                    window.location.reload();
                },
                onError: function(event, file, file_number, responseText) {
                    const response = JSON.parse(responseText);
                    toastr.error(response.message, 'Error');
                },
            });
        });        
